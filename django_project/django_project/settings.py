"""
Django settings for django_project project.

Generated by 'django-admin startproject' using Django 4.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
from distutils.log import debug
import os
from pathlib import Path
import django_heroku

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY")
SECRET_KEY=os.environ.get("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = (os.environ.get("DJANGO_DEBUG") == "True")

ALLOWED_HOSTS = [
    "foxhole-bounties.herokuapp.com",
    "foxholebounties.com",
    "localhost"
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "corsheaders",
    "users.apps.UsersConfig",
    "bounty.apps.BountyConfig",
    "crispy_forms",
    "django_filters",
    "bootstrapform",
    "storages",
    "user_visit",
    "sorl.thumbnail",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "user_visit.middleware.UserVisitMiddleware",
    'corsheaders.middleware.CorsMiddleware',
]

CORS_ALLOWED_ORIGINS = [
    "https://foxhole-bounty-bot.herokuapp.com",
    "https://foxhole-bounty-bot.herokuapp.com",
    "http://localhost:8080"
]

CORS_ORIGIN_WHITELIST = [
    "https://foxhole-bounty-bot.herokuapp.com",
    "http://foxhole-bounty-bot.herokuapp.com",
]

# CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOW_METHODS = [
'GET',
]

ROOT_URLCONF = 'django_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'
# Heroku config
STATIC_ROOT = os.path.join(BASE_DIR,"static_files")

MEDIA_ROOT = os.path.join(BASE_DIR,"media") # where media files live on the file system 
MEDIA_URL = "/media/" # route for accessing media via browser

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CRISPY_TEMPLATE_PACK = "bootstrap4"

LOGIN_REDIRECT_URL = "bounty-home"
LOGIN_URL = "login"

# EMAIL PASSWORD RESET
# https://learndjango.com/tutorials/django-password-reset-tutorial
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get("EMAIL_USER")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_PASS")

# S3 CONFIG
# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html
AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME=os.environ.get("AWS_STORAGE_BUCKET_NAME")

# AWS CLOUDFRONT SETTINGS
AWS_S3_CUSTOM_DOMAIN = os.environ.get("AWS_S3_CUSTOM_DOMAIN")

AWS_S3_FILE_OVERWRITE = False
AWS_DEFAULT_ACL = None

DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"

# DONT USE S3 FOR STATICFILES STORAGE
# STATICFILES_STORAGE = 'storages.backends.s3boto3.S3StaticStorage'


# TRACKING USER VISITS
# https://www.fullstackpython.com/blog/track-daily-user-data-django-user-visit.html

THUMBNAIL_FORCE_OVERWRITE = True

# CELERY CONFIG 
# https://nickmccullum.com/celery-django-periodic-tasks/
# Celery Broker - Redis  

# WARNING: IN DOCKER "localhost" NEEDS TO BE CHANGED TO REDIS
# CELERY_BROKER_URL = 'redis://localhost:6379'  
# CELERY_RESULT_BACKEND = 'redis://localhost:6379'  

# DISCORD CELERY PROVISION
# CELERY_BROKER_URL = 'redis://redis:6379'  
# CELERY_RESULT_BACKEND = 'redis://redis:6379' 

# HEROKUE CELERY PROVISION
CELERY_BROKER_URL = os.environ.get("REDIS_URL")
CELERY_RESULT_BACKEND = os.environ.get("REDIS_URL")
CELERY_ACCEPT_CONTENT = ['application/json']  
CELERY_TASK_SERIALIZER = 'json'  
CELERY_RESULT_SERIALIZER = 'json'  

# LINUX ONLY
if DEBUG == False:
    from memcacheify import memcacheify
    CACHES = memcacheify()

    # auto-handles Heroku configuration for PostgreSQL
    # django_heroku.settings(locals())

    DATABASES = {
    'default': {
        'ENGINE': 'django_db_geventpool.backends.postgresql_psycopg2',
        'NAME': 'db',
        'USER': 'postgres',
        'PASSWORD': 'postgres',
        'HOST': '',
        'PORT': '',
        'ATOMIC_REQUESTS': False,
        'CONN_MAX_AGE': 0,
        'OPTIONS': {
            'MAX_CONNS': 20,
            'REUSE_CONNS': 10
        }
    }
}